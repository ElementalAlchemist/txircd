# txircd Configuration - IRCv3 Modules

# The modules in this file enable IRCv3 features. Many of them are enabled by
# default; a few require additional setup. Regardless, we'll document all of
# them here for completeness.

modules:

# Cap: This implements the CAP command, which is the basis for how most of the
# other features here are enabled.
- Cap

# MultiPrefix: Provides a way to see all of each user's ranks in a channel on
# NAMES or WHO. It's a base extension in 3.1 (multi-prefix).
- MultiPrefix

# SASL: Provides a base mechanism to enable SASL in CAP and allow other modules
# to consistently use SASL for authentication. It's a base extension in 3.1
# (sasl).
- SASL

# SASLPlain: Provides the PLAIN SASL mechanism. Requires SASL to be loaded.
# This allows clients to authenticate to their accounts with SASL using the
# PLAIN mechanism.
- SASLPlain

# AccountNotify: Provides a mechanism to notify users of account changes (i.e.
# when another user logs into or out of an account). It's an optional extension
# in 3.1 (account-notify), but it's recommended to leave it enabled.
- AccountNotify

# AwayNotify: Provides a mechanism to notify users of changes in other users'
# away state (i.e. when another user sets or unsets themselves as "away"). It's
# an optional extension in 3.1 (away-notify), but it's recommended to leave it
# enabled.
- AwayNotify

# ExtendedJoin: Provides a mechanism to give users in the channel more
# information about joining users. It's an optional extension in 3.1
# (extended-join), but it's recommended to leave it enabled.
- ExtendedJoin

# Monitor: Provides a better way for users to track the online state of other
# users than the old method of continuously querying with ISON. It has some
# optional but hightly recommended setup (see below). It's a base extension in
# 3.2 (monitor).
- Monitor

# AccountTag: Provides a way for users to get another user's account names in
# contexts where extended-join and account-notify aren't sufficient to see the
# account name of the user who messaged you (e.g. private message with a user
# who shares no common channels). It's an optional but recommended extension in
# 3.2 (account-tag).
- AccountTag

# Batch: Provides a mechanism of exposing message batches to users. A message
# batch is a series of related messages caused by a single event. It's an
# optional extension in 3.2 (batch), and we recommend enabling it.
- Batch

# ChangeHost: Provides notification when a user's host changes. It's an optional
# extension in 3.2 (chghost), and we recommend enabling it.
- ChangeHost

# EchoMessage: Provides a mechanism to send messages a user sends back to the
# user who sends them. This allows clients to always show messages in order (as
# opposed to showing messages you're sending before messages that were sent
# before yours but not yet received) and with any modifications the server
# might make to them (e.g. if you have StripColors enabled). It's an optional
# extension in 3.2 (echo-message), and we recommend enabling it.
- EchoMessage

# InviteNotify: Provides a mechanism to notify users in a channel of a user
# being invited to the channel. It's an optional extension in 3.2
# (invite-notify), and we recommend enabling it.
- InviteNotify

# ServerTime: Provides the capability to clients to enable tagging messages
# with the time at which they should apply. It's an optional extension in 3.2
# (server-time), and we recommend enabling it.
- ServerTime

# UserhostInNames: Provides a way to get the nick!user@host instead of just the
# nick for each user in response to a NAMES command. It's an optional extension
# in 3.2 (userhost-in-names), and we recommend enabling it.
- UserhostInNames

# ChannelHistory: Provides a channel mode (+H) to provide a joining user with
# the last messages of a channel within a given timespan.
- ChannelHistory


# ChannelHistory Configuration
# This module requires a maximum number of lines that are to be kept in history
# to be specified, to avoid taking up too many system resources. The default
# value is 50 and the hard cap is 100.
#chanhistory_maxlines: 50

# Monitor Configuration
# This configuration simply involves specifying the maximum number of nicknames
# a single user can monitor. The default is unlimited. We recommend setting
# this value to something reasonable like 100 entries, but you may set it to
# whatever you like.
#monitor_limit: 100